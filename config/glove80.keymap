/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// layers

#define DEFAULT 0
#define LOWER 1
#define MAGIC 2

/ {
    behaviors {
        // For the "layer" key, it'd nice to be able to use it as either a shift or a toggle.
        // Configure it as a tap dance, so the first tap (or hold) is a &mo and the second tap is a &to

        layer_td: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <200>;
            bindings = <&mo 1>, <&to 0>;
        };

        soft_off_mt: soft_off_mt {
            compatible = "zmk,behavior-hold-tap";
            label = "SOFT_OFF_MT";
            bindings = <&soft_off>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <1000>;
        };
    };

    macros {
        bt_0: bt_profile_macro_0 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 0>;
        };

        bt_1: bt_profile_macro_1 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 1>;
        };

        bt_2: bt_profile_macro_2 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 2>;
        };

        bt_3: bt_profile_macro_3 {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&out OUT_BLE &bt BT_SEL 3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ---------------------------------------------------------------------------------------------------------------------------------
            // |  F1   |  F2 |  F3 |  F4  |  F5  |                                                               |  F6   |  F7   |  F8  |   F9  |  F10 |
            // |  =    |  1  |  2  |  3   |  4   |  5   |                                                 |  6   |   7   |   8   |  9   |   0   |   -  |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                                                 |  Y   |   U   |   I   |  O   |   P   |   \  |
            // |  ESC  |  A  |  S  |  D   |  F   |  G   |                                                 |  H   |   J   |   K   |  L   |   ;   |   '  |
            // |   `   |  Z  |  X  |  C   |  V   |  B   | LSHFT | LCTRL | LOWER | | LGUI  | RCTRL | RSHFT |  N   |   M   |   ,   |  .   |   /   | PGUP |
            // | MAGIC | HOME| END | LEFT | RIGHT|      | BSPC  | DEL   | LALT  | | RALT  | RET   | SPACE |      |  UP   | DOWN  |  [   |   ]   | PGDN |

            bindings = <
&soft_off_mt 0 F1                &kp F2    &kp F3   &kp F4    &kp F5                                                                                                                       &kp F6  &kp F7     &kp F8    &kp F9    &soft_off_mt 0 F10
&kp EQUAL                        &kp N1    &kp N2   &kp N3    &kp N4     &kp N5                                                                                                    &kp N6  &kp N7  &kp N8     &kp N9    &kp N0    &kp MINUS
&kp TAB                          &kp Q     &kp W    &kp E     &kp R      &kp T                                                                                                     &kp Y   &kp U   &kp I      &kp O     &kp P     &kp BSLH
&mt LCTRL TAB                    &kp A     &kp S    &kp D     &kp F      &kp G                                                                                                     &kp H   &kp J   &kp K      &kp L     &kp SEMI  &kp SQT
&mt LEFT_SHIFT LEFT_PARENTHESIS  &kp Z     &kp X    &kp C     &kp V      &kp B   &mt LEFT_META LEFT_META  &kp TAB    &layer_td         &kp RIGHT_ALT    &kp RCTRL      &kp ESCAPE  &kp N   &kp M   &kp COMMA  &kp DOT   &kp FSLH  &mt RIGHT_SHIFT RIGHT_PARENTHESIS
&mo 1                            &kp HOME  &kp END  &kp LEFT  &kp RIGHT          &kp SPACE                &kp LCTRL  &sk LEFT_SHIFT    &sk RIGHT_SHIFT  &kp BACKSPACE  &kp RET             &kp UP  &kp DOWN   &kp LBKT  &kp RBKT  &kp PG_DN
            >;
        };

        Symbols {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                      &trans      &trans            &trans      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans    &trans      &trans            &trans      &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans    &kp K_PREV  &kp K_PLAY_PAUSE  &kp K_NEXT  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &kp LEFT  &kp DOWN    &kp UP            &kp RIGHT   &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans    &trans      &trans            &trans      &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans            &trans      &trans            &trans      &trans  &trans
            >;
        };

        Mac {
            bindings = <
&trans  &trans  &trans  &trans  &trans                                                                    &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans                                                    &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans          &trans  &trans  &trans    &trans  &trans  &trans          &trans  &trans  &trans  &trans  &trans
            >;
        };
    };
};
